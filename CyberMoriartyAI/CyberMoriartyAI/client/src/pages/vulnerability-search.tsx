import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Search, Filter, Download } from "lucide-react";
import VulnerabilityCard from "@/components/vulnerability-card";
import VulnerabilityModal from "@/components/vulnerability-modal";
import { toast } from "@/hooks/use-toast";

export default function VulnerabilitySearch() {
  const [searchForm, setSearchForm] = useState({
    cveId: "",
    severity: "",
    product: "",
    vendor: "",
    cvssMin: "",
    cvssMax: "",
    hasExploit: ""
  });
  const [selectedVulnerability, setSelectedVulnerability] = useState<any>(null);
  const [currentPage, setCurrentPage] = useState(0);
  const pageSize = 20;

  const { data: vulnerabilityData, isLoading, refetch } = useQuery({
    queryKey: ["/api/vulnerabilities/search", searchForm, currentPage],
    queryFn: async () => {
      const params = new URLSearchParams();
      Object.entries(searchForm).forEach(([key, value]) => {
        if (value) params.append(key, value);
      });
      params.append("limit", pageSize.toString());
      params.append("offset", (currentPage * pageSize).toString());

      const response = await fetch(`/api/vulnerabilities/search?${params}`);
      if (!response.ok) throw new Error("Failed to search vulnerabilities");
      return response.json();
    }
  });

  const handleSearch = () => {
    setCurrentPage(0);
    refetch();
  };

  const handleCVESearch = async () => {
    if (!searchForm.cveId.trim() && !searchForm.product.trim()) {
      toast({
        title: "Search criteria required",
        description: "Please enter either a CVE ID or product name to search.",
        variant: "destructive",
      });
      return;
    }

    try {
      const searchQuery = {
        keyword: searchForm.product || searchForm.cveId,
        severity: searchForm.severity,
        resultsPerPage: 20,
        startIndex: 0
      };

      const response = await fetch("/api/cves/search", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(searchQuery),
      });

      if (!response.ok) throw new Error("Failed to search CVE database");
      
      await refetch();
      
      toast({
        title: "CVE search completed",
        description: "External CVE database search completed and results imported.",
      });
    } catch (error) {
      toast({
        title: "CVE search failed",
        description: "Failed to search external CVE database.",
        variant: "destructive",
      });
    }
  };

  const handleExportResults = async () => {
    if (!vulnerabilityData?.vulnerabilities?.length) {
      toast({
        title: "No data to export",
        description: "Please perform a search first to export results.",
        variant: "destructive",
      });
      return;
    }

    try {
      const response = await fetch("/api/reports", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          title: `Vulnerability Search Results - ${new Date().toISOString().split('T')[0]}`,
          vulnerabilityIds: vulnerabilityData.vulnerabilities.map((v: any) => v.id),
          exportFormat: "pdf"
        }),
      });

      if (!response.ok) throw new Error("Failed to generate report");
      
      toast({
        title: "Report generated",
        description: "Search results have been exported to a report.",
      });
    } catch (error) {
      toast({
        title: "Export failed",
        description: "Failed to export search results.",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="min-h-screen bg-dark-900 text-dark-50">
      {/* Header */}
      <header className="bg-dark-800 border-b border-dark-700 px-6 py-4">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-bold text-white">Vulnerability Search</h2>
            <p className="text-dark-300 mt-1">Search and discover vulnerabilities from local and external databases</p>
          </div>
          <Button 
            onClick={handleExportResults}
            variant="outline" 
            className="border-dark-600 text-dark-300 hover:bg-dark-700"
            data-testid="button-export-results"
          >
            <Download className="mr-2" size={16} />
            Export Results
          </Button>
        </div>
      </header>

      <main className="p-6">
        {/* Advanced Search Form */}
        <Card className="mb-6 bg-dark-800 border-dark-700">
          <CardHeader>
            <CardTitle className="text-xl font-bold text-white flex items-center">
              <Filter className="mr-2" size={20} />
              Advanced Search
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              <div>
                <Label className="text-dark-300 mb-2">CVE ID</Label>
                <Input
                  placeholder="CVE-2023-12345"
                  value={searchForm.cveId}
                  onChange={(e) => setSearchForm(prev => ({ ...prev, cveId: e.target.value }))}
                  className="bg-dark-700 border-dark-600 text-white placeholder-dark-400 focus:border-primary"
                  data-testid="search-cve-id"
                />
              </div>

              <div>
                <Label className="text-dark-300 mb-2">Severity</Label>
                <Select value={searchForm.severity} onValueChange={(value) => setSearchForm(prev => ({ ...prev, severity: value }))}>
                  <SelectTrigger className="bg-dark-700 border-dark-600 text-white focus:border-primary" data-testid="search-severity">
                    <SelectValue placeholder="All Severities" />
                  </SelectTrigger>
                  <SelectContent className="bg-dark-700 border-dark-600">
                    <SelectItem value="all">All Severities</SelectItem>
                    <SelectItem value="Critical">Critical</SelectItem>
                    <SelectItem value="High">High</SelectItem>
                    <SelectItem value="Medium">Medium</SelectItem>
                    <SelectItem value="Low">Low</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label className="text-dark-300 mb-2">Product</Label>
                <Input
                  placeholder="e.g., Apache, WordPress"
                  value={searchForm.product}
                  onChange={(e) => setSearchForm(prev => ({ ...prev, product: e.target.value }))}
                  className="bg-dark-700 border-dark-600 text-white placeholder-dark-400 focus:border-primary"
                  data-testid="search-product"
                />
              </div>

              <div>
                <Label className="text-dark-300 mb-2">Vendor</Label>
                <Input
                  placeholder="e.g., Microsoft, Google"
                  value={searchForm.vendor}
                  onChange={(e) => setSearchForm(prev => ({ ...prev, vendor: e.target.value }))}
                  className="bg-dark-700 border-dark-600 text-white placeholder-dark-400 focus:border-primary"
                  data-testid="search-vendor"
                />
              </div>

              <div>
                <Label className="text-dark-300 mb-2">CVSS Score Range</Label>
                <div className="flex space-x-2">
                  <Input
                    type="number"
                    placeholder="Min"
                    value={searchForm.cvssMin}
                    onChange={(e) => setSearchForm(prev => ({ ...prev, cvssMin: e.target.value }))}
                    className="bg-dark-700 border-dark-600 text-white placeholder-dark-400 focus:border-primary"
                    min="0"
                    max="10"
                    step="0.1"
                    data-testid="search-cvss-min"
                  />
                  <Input
                    type="number"
                    placeholder="Max"
                    value={searchForm.cvssMax}
                    onChange={(e) => setSearchForm(prev => ({ ...prev, cvssMax: e.target.value }))}
                    className="bg-dark-700 border-dark-600 text-white placeholder-dark-400 focus:border-primary"
                    min="0"
                    max="10"
                    step="0.1"
                    data-testid="search-cvss-max"
                  />
                </div>
              </div>

              <div>
                <Label className="text-dark-300 mb-2">Exploit Available</Label>
                <Select value={searchForm.hasExploit} onValueChange={(value) => setSearchForm(prev => ({ ...prev, hasExploit: value }))}>
                  <SelectTrigger className="bg-dark-700 border-dark-600 text-white focus:border-primary" data-testid="search-exploit">
                    <SelectValue placeholder="Any" />
                  </SelectTrigger>
                  <SelectContent className="bg-dark-700 border-dark-600">
                    <SelectItem value="any">Any</SelectItem>
                    <SelectItem value="true">Yes</SelectItem>
                    <SelectItem value="false">No</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="flex items-center justify-between mt-6 pt-4 border-t border-dark-700">
              <div className="flex space-x-2">
                <Button onClick={handleSearch} className="bg-primary hover:bg-primary/90" data-testid="button-search-local">
                  <Search className="mr-2" size={16} />
                  Search Local Database
                </Button>
                <Button onClick={handleCVESearch} variant="outline" className="border-dark-600 text-dark-300 hover:bg-dark-700" data-testid="button-search-external">
                  Search External CVE Database
                </Button>
              </div>
              <div className="text-sm text-dark-400">
                Last updated: {new Date().toLocaleString()}
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Search Results */}
        <Card className="bg-dark-800 border-dark-700">
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle className="text-lg font-semibold text-white">Search Results</CardTitle>
              <div className="text-sm text-dark-400">
                {vulnerabilityData ? `${vulnerabilityData.vulnerabilities?.length || 0} of ${vulnerabilityData.total || 0} results` : "Ready to search"}
              </div>
            </div>
          </CardHeader>
          <div className="divide-y divide-dark-700">
            {isLoading ? (
              <div className="p-8 text-center text-dark-400" data-testid="loading-state">Loading vulnerabilities...</div>
            ) : vulnerabilityData?.vulnerabilities?.length > 0 ? (
              vulnerabilityData.vulnerabilities.map((vulnerability: any) => (
                <VulnerabilityCard
                  key={vulnerability.id}
                  vulnerability={vulnerability}
                  onViewDetails={setSelectedVulnerability}
                />
              ))
            ) : (
              <div className="p-8 text-center text-dark-400" data-testid="no-results">
                <Search className="mx-auto mb-4 text-dark-500" size={48} />
                <h3 className="text-lg font-medium text-dark-300 mb-2">No vulnerabilities found</h3>
                <p>Try adjusting your search criteria or search the external CVE database.</p>
              </div>
            )}
          </div>
          
          {vulnerabilityData?.vulnerabilities?.length > 0 && (
            <div className="p-4 border-t border-dark-700">
              <div className="flex items-center justify-between">
                <Button
                  onClick={() => setCurrentPage(prev => Math.max(0, prev - 1))}
                  disabled={currentPage === 0}
                  variant="outline"
                  className="border-dark-600 text-dark-300 hover:bg-dark-700 disabled:opacity-50"
                  data-testid="button-previous"
                >
                  Previous
                </Button>
                <span className="text-sm text-dark-400">
                  Page {currentPage + 1} of {Math.ceil((vulnerabilityData.total || 0) / pageSize)}
                </span>
                <Button
                  onClick={() => setCurrentPage(prev => prev + 1)}
                  disabled={(currentPage + 1) * pageSize >= (vulnerabilityData.total || 0)}
                  variant="outline"
                  className="border-dark-600 text-dark-300 hover:bg-dark-700 disabled:opacity-50"
                  data-testid="button-next"
                >
                  Next
                </Button>
              </div>
            </div>
          )}
        </Card>
      </main>

      {/* Vulnerability Details Modal */}
      {selectedVulnerability && (
        <VulnerabilityModal
          vulnerability={selectedVulnerability}
          onClose={() => setSelectedVulnerability(null)}
        />
      )}
    </div>
  );
}
