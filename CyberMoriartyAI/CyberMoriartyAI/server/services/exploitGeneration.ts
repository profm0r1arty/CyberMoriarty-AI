import OpenAI from "openai";

// the newest OpenAI model is "gpt-4o" which was released May 13, 2024. do not change this unless explicitly requested by the user
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

export interface ExploitGenerationRequest {
  vulnerabilityType: string;
  targetPlatform: string;
  description: string;
  difficulty?: string;
  includeComments?: boolean;
}

export interface ExploitGenerationResult {
  code: string;
  explanation: string;
  safetyNotes: string[];
  testingGuidelines: string[];
  references: string[];
}

export async function generateExploitCode(request: ExploitGenerationRequest): Promise<ExploitGenerationResult> {
  if (!process.env.OPENAI_API_KEY) {
    throw new Error("OpenAI API key is required for exploit generation");
  }

  const difficulty = request.difficulty || "intermediate";
  const includeComments = request.includeComments !== false;

  const systemPrompt = `You are an expert cybersecurity professional and ethical hacker specializing in exploit development for authorized security testing purposes only.

Your role is to generate educational and professional exploit code that helps security researchers and penetration testers understand vulnerabilities and develop proper defenses.

IMPORTANT ETHICAL GUIDELINES:
- Only generate exploits for educational and authorized testing purposes
- Include comprehensive safety warnings and ethical use guidelines
- Provide detailed explanations of how the exploit works
- Include proper disclaimers about legal and authorized use only
- Focus on defensive understanding and remediation guidance

Generate exploit code that is:
- Well-commented and educational
- Follows security research best practices
- Includes proper error handling
- Provides clear testing guidelines
- Emphasizes responsible disclosure

NEVER generate exploits that:
- Target specific real systems without authorization
- Include actual malicious payloads
- Bypass security measures for illegal purposes
- Lack proper safety warnings and ethical guidelines`;

  const userPrompt = `Generate a professional exploit for educational and authorized testing purposes:

Vulnerability Type: ${request.vulnerabilityType}
Target Platform: ${request.targetPlatform}
Difficulty Level: ${difficulty}
Description: ${request.description}

Requirements:
- Include comprehensive comments explaining each step
- Provide safety warnings and ethical use guidelines
- Include testing guidelines for controlled environments
- Add remediation recommendations
- Use placeholder values for sensitive data
- Focus on educational value and defensive understanding

Format the response as JSON with the following structure:
{
  "code": "Complete exploit code with comments",
  "explanation": "Detailed explanation of how the exploit works",
  "safetyNotes": ["Safety warning 1", "Safety warning 2", ...],
  "testingGuidelines": ["Testing guideline 1", "Testing guideline 2", ...],
  "references": ["Reference 1", "Reference 2", ...]
}`;

  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPrompt }
      ],
      response_format: { type: "json_object" },
      temperature: 0.7,
      max_tokens: 2000
    });

    const result = JSON.parse(response.choices[0].message.content || '{}');
    
    // Validate the response structure
    if (!result.code || !result.explanation) {
      throw new Error("Invalid response format from AI model");
    }

    // Add mandatory safety headers to the code
    const safetyHeader = `#!/usr/bin/env python3
# ========================================================================
# ETHICAL USE NOTICE - AUTHORIZED TESTING ONLY
# ========================================================================
# This exploit code is for educational and authorized security testing only.
# Use only on systems you own or have explicit written permission to test.
# Unauthorized use is illegal and violates ethical hacking principles.
# 
# Generated by: CyberMoriarty AI
# Purpose: Security research and defensive understanding
# Platform: ${request.targetPlatform}
# Vulnerability: ${request.vulnerabilityType}
# ========================================================================

`;

    const enhancedResult: ExploitGenerationResult = {
      code: safetyHeader + result.code,
      explanation: result.explanation,
      safetyNotes: [
        "This exploit is for educational and authorized testing purposes only",
        "Use only on systems you own or have explicit written permission to test",
        "Unauthorized use is illegal and violates ethical hacking principles",
        "Always follow responsible disclosure practices",
        "Maintain comprehensive audit logs of all testing activities",
        ...(result.safetyNotes || [])
      ],
      testingGuidelines: [
        "Set up isolated test environment before running exploit",
        "Verify you have proper authorization before testing",
        "Document all testing activities for audit purposes",
        "Test in controlled environment first",
        "Have incident response plan ready",
        ...(result.testingGuidelines || [])
      ],
      references: result.references || []
    };

    return enhancedResult;

  } catch (error) {
    console.error("Error generating exploit code:", error);
    throw new Error("Failed to generate exploit code. Please try again.");
  }
}

export async function validateExploitCode(code: string): Promise<{
  isValid: boolean;
  issues: string[];
  suggestions: string[];
}> {
  // Basic validation checks
  const issues: string[] = [];
  const suggestions: string[] = [];

  // Check for safety headers
  if (!code.includes("ETHICAL USE NOTICE") && !code.includes("AUTHORIZED TESTING ONLY")) {
    issues.push("Missing ethical use notice and safety warnings");
  }

  // Check for dangerous patterns
  const dangerousPatterns = [
    /rm\s+-rf\s+\//, // Dangerous file deletion
    /format\s+c:/, // Windows format command
    /dd\s+if=\/dev\/zero/, // Disk wiping
    /:\(\)\{.*\}/, // Fork bomb
  ];

  dangerousPatterns.forEach((pattern, index) => {
    if (pattern.test(code)) {
      issues.push(`Contains potentially dangerous pattern (${index + 1})`);
    }
  });

  // Check for proper structure
  if (!code.includes("import") && !code.includes("#include") && !code.includes("require")) {
    suggestions.push("Consider adding proper imports/includes for better structure");
  }

  if (!code.includes("try") && !code.includes("except") && !code.includes("catch")) {
    suggestions.push("Add error handling for more robust exploit code");
  }

  return {
    isValid: issues.length === 0,
    issues,
    suggestions
  };
}

export async function generateExploitDocumentation(exploitCode: string, metadata: {
  name: string;
  vulnerabilityType: string;
  targetPlatform: string;
}): Promise<string> {
  if (!process.env.OPENAI_API_KEY) {
    throw new Error("OpenAI API key is required for documentation generation");
  }

  const prompt = `Generate comprehensive documentation for this exploit code:

Exploit Name: ${metadata.name}
Vulnerability Type: ${metadata.vulnerabilityType}
Target Platform: ${metadata.targetPlatform}

Code:
${exploitCode}

Create professional documentation that includes:
1. Executive summary
2. Technical analysis
3. Prerequisites and requirements
4. Step-by-step usage instructions
5. Expected results
6. Mitigation recommendations
7. Legal and ethical considerations
8. References and further reading

Format as markdown and focus on educational value and defensive understanding.`;

  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content: "You are a cybersecurity documentation expert. Generate professional, educational documentation for security research purposes."
        },
        { role: "user", content: prompt }
      ],
      temperature: 0.5,
      max_tokens: 1500
    });

    return response.choices[0].message.content || "Documentation generation failed";

  } catch (error) {
    console.error("Error generating documentation:", error);
    throw new Error("Failed to generate exploit documentation");
  }
}