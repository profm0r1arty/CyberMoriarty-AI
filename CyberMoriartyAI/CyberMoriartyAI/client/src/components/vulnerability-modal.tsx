import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Brain, FlaskConical, FileText, X } from "lucide-react";
import { cn } from "@/lib/utils";
import { useState } from "react";
import { toast } from "@/hooks/use-toast";

interface VulnerabilityModalProps {
  vulnerability: {
    id: string;
    cveId: string;
    description: string;
    severity: string;
    cvssScore?: number | null;
    product?: string | null;
    vendor?: string | null;
    publishedDate?: string | null;
    updatedDate?: string | null;
    references?: string[];
    rawData?: any;
  };
  onClose: () => void;
}

export default function VulnerabilityModal({ vulnerability, onClose }: VulnerabilityModalProps) {
  const [isAssessing, setIsAssessing] = useState(false);

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical':
        return 'severity-critical';
      case 'high':
        return 'severity-high';
      case 'medium':
        return 'severity-medium';
      case 'low':
        return 'severity-low';
      default:
        return 'bg-gray-500/20 text-gray-400 border-gray-500/30';
    }
  };

  const handleAIAssessment = async () => {
    setIsAssessing(true);
    try {
      const response = await fetch("/api/assessments", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          vulnerabilityId: vulnerability.id,
          status: "pending"
        }),
      });

      if (!response.ok) throw new Error("Failed to start assessment");
      
      toast({
        title: "AI Assessment Started",
        description: `CyberMoriarty AI is performing comprehensive analysis of ${vulnerability.cveId}...`,
      });
    } catch (error) {
      toast({
        title: "Assessment Failed",
        description: "Failed to start AI vulnerability assessment.",
        variant: "destructive",
      });
    } finally {
      setIsAssessing(false);
    }
  };

  const handleExportReport = async () => {
    try {
      const response = await fetch("/api/reports", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          title: `Vulnerability Report - ${vulnerability.cveId}`,
          vulnerabilityIds: [vulnerability.id],
          exportFormat: "pdf"
        }),
      });

      if (!response.ok) throw new Error("Failed to generate report");
      
      toast({
        title: "Report Generated",
        description: `Vulnerability report for ${vulnerability.cveId} has been generated.`,
      });
    } catch (error) {
      toast({
        title: "Report Generation Failed",
        description: "Failed to generate vulnerability report.",
        variant: "destructive",
      });
    }
  };

  return (
    <Dialog open={true} onOpenChange={onClose}>
      <DialogContent className="bg-dark-800 border-dark-700 max-w-4xl max-h-[90vh] overflow-y-auto" data-testid="vulnerability-modal">
        <DialogHeader className="border-b border-dark-700 pb-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <DialogTitle className="text-2xl font-bold text-white" data-testid="modal-title">
                {vulnerability.cveId}
              </DialogTitle>
              <Badge 
                variant="outline" 
                className={cn("text-sm border", getSeverityColor(vulnerability.severity))}
                data-testid="modal-severity"
              >
                {vulnerability.severity}
              </Badge>
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={onClose}
              className="text-dark-400 hover:text-white"
              data-testid="button-close-modal"
            >
              <X size={20} />
            </Button>
          </div>
        </DialogHeader>

        <div className="space-y-6 pt-4">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="lg:col-span-2">
              <h4 className="text-lg font-semibold text-white mb-3">Description</h4>
              <p className="text-dark-300 leading-relaxed mb-6" data-testid="modal-description">
                {vulnerability.description}
              </p>
              
              <h4 className="text-lg font-semibold text-white mb-3">Technical Details</h4>
              <div className="bg-dark-900 border border-dark-700 rounded-lg p-4">
                <pre className="text-sm text-dark-300 overflow-x-auto" data-testid="technical-details">
                  <code>{`CVE ID: ${vulnerability.cveId}
Severity: ${vulnerability.severity}
CVSS Score: ${vulnerability.cvssScore || 'N/A'}
Product: ${vulnerability.product || 'N/A'}
Vendor: ${vulnerability.vendor || 'N/A'}
Published: ${vulnerability.publishedDate ? new Date(vulnerability.publishedDate).toLocaleDateString() : 'N/A'}
Updated: ${vulnerability.updatedDate ? new Date(vulnerability.updatedDate).toLocaleDateString() : 'N/A'}`}</code>
                </pre>
              </div>

              {vulnerability.references && vulnerability.references.length > 0 && (
                <>
                  <h4 className="text-lg font-semibold text-white mt-6 mb-3">References</h4>
                  <div className="space-y-2">
                    {vulnerability.references.slice(0, 5).map((ref: string, index: number) => (
                      <a
                        key={index}
                        href={ref}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="block text-primary hover:text-primary/80 text-sm truncate"
                        data-testid={`reference-${index}`}
                      >
                        {ref}
                      </a>
                    ))}
                  </div>
                </>
              )}
            </div>
            
            <div>
              <h4 className="text-lg font-semibold text-white mb-3">Metrics</h4>
              <div className="space-y-3">
                <div className="flex justify-between items-center p-3 bg-dark-700 rounded-lg">
                  <span className="text-dark-300">CVSS Score</span>
                  <span className="font-bold text-white" data-testid="cvss-score-detail">
                    {vulnerability.cvssScore || 'N/A'}
                  </span>
                </div>
                <div className="flex justify-between items-center p-3 bg-dark-700 rounded-lg">
                  <span className="text-dark-300">Severity</span>
                  <span className={cn("font-bold", 
                    vulnerability.severity === 'Critical' ? 'text-red-400' :
                    vulnerability.severity === 'High' ? 'text-orange-400' :
                    vulnerability.severity === 'Medium' ? 'text-yellow-400' :
                    'text-green-400'
                  )}>
                    {vulnerability.severity}
                  </span>
                </div>
                <div className="flex justify-between items-center p-3 bg-dark-700 rounded-lg">
                  <span className="text-dark-300">Product</span>
                  <span className="font-medium text-white truncate ml-2" data-testid="product-detail">
                    {vulnerability.product || 'N/A'}
                  </span>
                </div>
                <div className="flex justify-between items-center p-3 bg-dark-700 rounded-lg">
                  <span className="text-dark-300">Vendor</span>
                  <span className="font-medium text-white truncate ml-2" data-testid="vendor-detail">
                    {vulnerability.vendor || 'N/A'}
                  </span>
                </div>
              </div>

              <div className="mt-6">
                <h5 className="font-semibold text-white mb-3">AI Risk Assessment</h5>
                <div className="bg-amber-500/10 border border-amber-500/20 rounded-lg p-4">
                  <div className="flex items-center space-x-2 mb-2">
                    <Brain className="text-amber-500" size={16} />
                    <span className="font-semibold text-amber-400">Ready for Analysis</span>
                  </div>
                  <p className="text-sm text-dark-300">
                    Click "Run AI Assessment" to get detailed risk analysis from CyberMoriarty AI.
                  </p>
                </div>
              </div>
            </div>
          </div>

          <div className="flex items-center justify-between pt-4 border-t border-dark-700">
            <div className="flex items-center space-x-3">
              <Button
                onClick={handleAIAssessment}
                disabled={isAssessing}
                className="bg-primary hover:bg-primary/90"
                data-testid="button-run-assessment"
              >
                <Brain className="mr-2" size={16} />
                {isAssessing ? "Running Assessment..." : "Run AI Assessment"}
              </Button>
              <Button
                variant="secondary"
                className="bg-amber-600 hover:bg-amber-700 text-white"
                data-testid="button-test-exploit"
              >
                <FlaskConical className="mr-2" size={16} />
                Test Exploit
              </Button>
              <Button
                onClick={handleExportReport}
                variant="outline"
                className="border-dark-600 hover:bg-dark-700 text-dark-300 hover:text-white"
                data-testid="button-export-report"
              >
                <FileText className="mr-2" size={16} />
                Export Report
              </Button>
            </div>
            <Button
              variant="ghost"
              onClick={onClose}
              className="text-dark-400 hover:text-white"
              data-testid="button-close-details"
            >
              Close Details
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
