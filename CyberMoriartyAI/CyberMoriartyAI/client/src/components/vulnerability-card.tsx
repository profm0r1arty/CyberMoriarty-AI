import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Brain, Eye } from "lucide-react";
import { cn } from "@/lib/utils";
import { useState } from "react";
import { toast } from "@/hooks/use-toast";

interface VulnerabilityCardProps {
  vulnerability: {
    id: string;
    cveId: string;
    description: string;
    severity: string;
    cvssScore?: number | null;
    product?: string | null;
    vendor?: string | null;
    publishedDate?: string | null;
    updatedDate?: string | null;
  };
  onViewDetails: (vulnerability: any) => void;
}

export default function VulnerabilityCard({ vulnerability, onViewDetails }: VulnerabilityCardProps) {
  const [isAssessing, setIsAssessing] = useState(false);

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical':
        return 'severity-critical';
      case 'high':
        return 'severity-high';
      case 'medium':
        return 'severity-medium';
      case 'low':
        return 'severity-low';
      default:
        return 'bg-gray-500/20 text-gray-400 border-gray-500/30';
    }
  };

  const handleAIAssessment = async () => {
    setIsAssessing(true);
    try {
      const response = await fetch("/api/assessments", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          vulnerabilityId: vulnerability.id,
          status: "pending"
        }),
      });

      if (!response.ok) throw new Error("Failed to start assessment");
      
      const assessment = await response.json();
      
      toast({
        title: "AI Assessment Started",
        description: `CyberMoriarty AI is analyzing ${vulnerability.cveId}...`,
      });
    } catch (error) {
      toast({
        title: "Assessment Failed",
        description: "Failed to start AI vulnerability assessment.",
        variant: "destructive",
      });
    } finally {
      setIsAssessing(false);
    }
  };

  return (
    <div className="p-4 hover:bg-dark-700/50 transition-colors" data-testid={`vulnerability-card-${vulnerability.cveId}`}>
      <div className="flex items-start justify-between">
        <div className="flex-1">
          <div className="flex items-center space-x-3 mb-2">
            <h4 className="font-semibold text-white">{vulnerability.cveId}</h4>
            <Badge 
              variant="outline" 
              className={cn("text-xs border", getSeverityColor(vulnerability.severity))}
              data-testid={`severity-${vulnerability.severity.toLowerCase()}`}
            >
              {vulnerability.severity}
            </Badge>
            {vulnerability.cvssScore && (
              <span className="text-dark-400 text-sm" data-testid="cvss-score">
                CVSS {vulnerability.cvssScore}
              </span>
            )}
          </div>
          <p className="text-dark-300 text-sm mb-2 line-clamp-2" data-testid="vulnerability-description">
            {vulnerability.description}
          </p>
          <div className="flex items-center space-x-4 text-xs text-dark-400">
            {vulnerability.product && (
              <>
                <span data-testid="product-info">Product: {vulnerability.product}</span>
                <span>•</span>
              </>
            )}
            {vulnerability.publishedDate && (
              <>
                <span data-testid="published-date">
                  Published: {new Date(vulnerability.publishedDate).toLocaleDateString()}
                </span>
                <span>•</span>
              </>
            )}
            {vulnerability.updatedDate && (
              <span data-testid="updated-date">
                Updated: {new Date(vulnerability.updatedDate).toLocaleDateString()}
              </span>
            )}
          </div>
        </div>
        <div className="flex items-center space-x-2 ml-4">
          <Button
            onClick={handleAIAssessment}
            disabled={isAssessing}
            size="sm"
            className="bg-primary hover:bg-primary/90"
            data-testid="button-ai-assess"
          >
            <Brain className="mr-1" size={14} />
            {isAssessing ? "Analyzing..." : "AI Assess"}
          </Button>
          <Button
            onClick={() => onViewDetails(vulnerability)}
            variant="outline"
            size="sm"
            className="border-dark-600 hover:bg-dark-700 text-dark-300 hover:text-white"
            data-testid="button-view-details"
          >
            <Eye className="mr-1" size={14} />
            Details
          </Button>
        </div>
      </div>
    </div>
  );
}
